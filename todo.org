 - [X] Make Motherships post on app state transition.
 - [X] Consume Mothership deployed/ready/running/stopped acknowledgements, and
   print a nice message when they're all received by root (counting in some
   persistent data structure I haven't made yet).
 - [X] Set up Mothership acknowledgement on error, and update deplStat in Root.
 - [X] When one Mothership sends an error, propagate that to other Motherships.
 - [X] Allow recall to break through error, and clear that error state in Root
   once all Motherships have acknowledged.
 - [X] Test above functionality.
 - [X] Update user guide with new outputs
 - [ ] Update Mothership documentation to explain what the acknowledgements are
   used for.
 - [ ] Add error request (MSHP,REQ,BRKN) message to Mothership documentation.
 - [ ] Add error propagation (CMND,BRKN) message to Mothership documentation.
 - [ ] Add recall acknowledgement (MSHP,ACK,RECL) message to Mothership
   documentation.
 - [ ] After deployment, initialisation, and stopping on a given Mothership,
   warn the user that it's taking a while if it's taking a while. How long is a
   while? It's dependent on user code. Alright, maybe just do it for deployment
   then. Actually, this is looking like a bit too much work. It requires
   deployment to write times to a struct in shared memory (in the Mothership
   class, probably), and for the Mothership's OnIdle logic to poll it, while
   also managing the Supervisor's OnIdle logic. Too easy to make a hard-to-find
   mistake for a tiny UX benefit, so I'm shelving this.
 - [ ] Strongly consider abstracting all of this Mothership-communication logic
   (in Root and OrchBase) into a class of its own, and incorporate it into the
   Mothership documentation. So I considered it, but this system is too damn
   entangled to make the approach worth it. The class would need to have access
   to commonbase members (for Post), and OrchBase's app structure to have a
   chance, not to mention that Root would need to hook into the class'
   methods. I drew a picture. It's a soup.
